#!/bin/bash

# This script compares the output generated by gen_base.sh with the 
# one generated by the specified ft-demos binaries.

# To run this script, just call it as "./regression.sh", no options required.
# It requires a fonts/ folder to get the base output from.
# It generates a test/ folder that contains all the test output
# and the index.html file is used for navigating it.

# The script uses the following environment variables (if available):
 
# FTT_TEST_TOOLS_DIR: Location of test ft-demos binaries (ftlint, ftgrid, etc)

# FTT_BASE_OUTPUT_DIR: Where the gen_base.sh output is stored.

# FTT_TEST_OUTPUT_DIR: Where the script stores its output

# Colors, for aesthetics
BLUE='\033[0;34m'
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
CYAN='\033[0;36m'
PURPLE='\033[1;35m'
NC='\033[0m'

fontsize=""

# Store the script execution location, helps simplify later commands.
execdir=$(pwd)

if [ -z "${FTT_TEST_TOOLS_PATH}" ] 
then
  FTT_TEST_TOOLS_PATH="/usr/local/bin"
fi

if [ -z "${FTT_TEST_OUTPUT_DIR}" ]
then
  FTT_TEST_OUTPUT_DIR="${execdir}/test"
fi

if [ -z "${FTT_BASE_OUTPUT_DIR}" ]
then
  FTT_BASE_OUTPUT_DIR="${execdir}/base"
fi

  FTBENCH="${FTT_TEST_TOOLS_PATH}/ftbench"
  FTDUMP="${FTT_TEST_TOOLS_PATH}/ftdump"
  FTLINT="${FTT_TEST_TOOLS_PATH}/ftlint"
  FTGRID="${FTT_TEST_TOOLS_PATH}/ftgrid"

# Function to run ftlint on a font and store the output in a file named "{fontname}.ftlint".
# $1 = Font file location
# $2 = Font Name
run_ftlint(){
echo "Running ftlint on $2"
"${FTLINT}" "${fontsize}" "$1" | grep -E '[0-9]:' > "${2}_${fontsize}.ftlint"
}

# Function to generate report of a font
# $1 = Font File Path
# $2 = Font Name
create_report(){
  fontfile=$1
  fontname=$2

  echo "Dumping ${fontfile}"
  "${FTDUMP}" "${fontfile}" > "${fontname}.ftdump"
  mv "${fontname}.ftdump" ../
  echo "Benching $1"
  "${FTBENCH}" "${fontfile}" > "${fontname}.ftbench"
  mv "${fontname}.ftbench" ../

# Read the base ftlint output and convert it into an array delimited by newline.
  basehashes=$(cat "${FTT_BASE_OUTPUT_DIR}/${fontname}/${fontsize}/${fontname}_${fontsize}.ftlint")
  readarray -t basehashlist <<<"$basehashes"

# Read the test ftlint output and convert it into an array delimited by newline.
  testhashes=$(cat "${fontname}_${fontsize}.ftlint")
  readarray -t testhashlist <<<"$testhashes"

# Iterate over the array of ftlint output, checking each line for differences.
  for i in "${!basehashlist[@]}"
  do
  if [ "${basehashlist[$i]}" = "${testhashlist[$i]}" ] ; then
  echo -e "${BLUE}Glyph ${i} Unchanged${NC}"

  else

# Run ftgrid for the changed glyph and copy base ftgrid output to test directory (${execdir}/test/{fontname}/{glyphindex}) 
  echo -e "${RED}Generating report of ${i}${NC}"
  mkdir "$i" && cd "$_" || exit
  "${FTGRID}" -k Pq -f "${i}" "${fontsize}" "${fontfile}" > /dev/null 2>&1
  mv "ftgrid.png" "${fontname}_${fontsize}_${i}_test.png"
  cp "${FTT_BASE_OUTPUT_DIR}/${fontname}/${fontsize}/${fontname}_${fontsize}_${i}_base.png" ./
  python3 "${execdir}/diff.py" "${fontname}_${fontsize}_${i}_base.png" "${fontname}_${fontsize}_${i}_test.png"
  cd ..

  fi
  done
}

# Main function that is called to check a font.
# $1 = Name of Font (Case-sensitive)
check_font(){
  fontsize=$2
  fontfile=$1
  fontname_extn=$(basename "${fontfile}")
  fontname="${fontname_extn%.*}"

  echo -e "${PURPLE}Checking ${fontfile} for regressions${NC}"
  mkdir -p "${fontname}/${fontsize}" && cd "$_" || exit

  run_ftlint "${fontfile}" "${fontname}"

  hash=$(md5sum "${fontname}_${fontsize}.ftlint" | cut -d ' ' -f 1)

  basehash=$(md5sum "${FTT_BASE_OUTPUT_DIR}/${fontname}/${fontsize}/${fontname}_${fontsize}.ftlint" | cut -d ' ' -f 1)

# Compare the md5 hash of base ftlint file and test ftlint file.
  if [ "${hash}" = "${basehash}" ] ; then
  echo -e "${GREEN}No errors found${NC}"
  rm -rf "${FTT_TEST_OUTPUT_DIR}/${fontname}/${fontsize}"

  else
# If the file hashes don't match, it means there has been a regression, find the regression and report it.
  create_report "${fontfile}" "${fontname}"
  fi

  cd "${FTT_TEST_OUTPUT_DIR}"
}

rm -rf "${FTT_TEST_OUTPUT_DIR}"

# Start of the script. Create the test/ folder at the root of execution directory.
mkdir -p "${FTT_TEST_OUTPUT_DIR}" && cd "$_" || exit

# Array that stores font sizes to be tested
fontsize_array=(12 20)

# Parallel loop, for checking regressions
for i in "${fontsize_array[@]}"
  do
  for j in ${execdir}/fonts/*
  do
  check_font "${j}" "${i}" &
  done
  wait
done

cd "${execdir}" || exit

# Generate the directory structure of test/ as JSON and store it in a js file to be used by webpages
tree -dJ "${FTT_TEST_OUTPUT_DIR}" > index.js

# Trick to export the directory structure as a js variable
jscontent=$(cat index.js)
jscontent="let text = \`\n${jscontent}\`;"
echo -e "${jscontent}" > index.js

mv index.js "${FTT_TEST_OUTPUT_DIR}"
cp index.html "${FTT_TEST_OUTPUT_DIR}"
cp font.html "${FTT_TEST_OUTPUT_DIR}"
cp glyph.html "${FTT_TEST_OUTPUT_DIR}"
cp styling.css "${FTT_TEST_OUTPUT_DIR}"

regressed=$(find "${FTT_TEST_OUTPUT_DIR}" -name "*.ftlint")

if [ -z "${regressed}" ] ; then
  echo "No Regressions Found!"

else
  FTT_TEST_OUTPUT_DIR_PARENT=$(dirname "${FTT_TEST_OUTPUT_DIR}")
  mv "${FTT_TEST_OUTPUT_DIR}" "${FTT_TEST_OUTPUT_DIR_PARENT}/report"
  tar -czf report.tar.gz "${FTT_TEST_OUTPUT_DIR_PARENT}/report"
fi

