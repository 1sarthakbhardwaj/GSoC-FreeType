#!/bin/bash

# This script iterates through the font files present in fonts/
# and creates the files necessary for comparing the output in base/
 
# The script uses the following environment variables (if available):
 
# FTT_BASE_TOOLS_DIR: Location of base ft-demos binaries (ftlint, ftgrid, etc)

# FTT_BASE_OUTPUT_DIR: Where the script stores its output.

# List of files generated by the script:

# Inside base/{fontname}/{fontsize}:
#  {fontname}_{fontsize}.ftlint
#  {fontname}_{fontsize}_{glyphindex}_base.png (for all the glyphs in the font)

# Colors, for aesthetics
BLUE='\033[0;34m'
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
CYAN='\033[0;36m'
PURPLE='\033[1;35m'
NC='\033[0m'

# Array that specifies which font sizes to generate the base/ files for
fontsize_array=(12 20)

# Store the script execution location, helps simplify later commands.
execdir=$(pwd)

if [ -z "${FTT_BASE_TOOLS_PATH}" ] 
then
  FTT_BASE_TOOLS_PATH="/usr/local/bin"
fi

if [ -z "${FTT_BASE_OUTPUT_DIR}" ]
then
  FTT_BASE_OUTPUT_DIR="${execdir}/base"
fi

FTDUMP="${FTT_BASE_TOOLS_PATH}/ftdump"
FTLINT="${FTT_BASE_TOOLS_PATH}/ftlint"
FTGRID="${FTT_BASE_TOOLS_PATH}/ftgrid"

# Function to obtain the number of glyphs in a font
getmaxidx(){
  echo $("${FTDUMP}" $1 | grep "glyph count" | cut -d ':' -f 2 | tr -d ' ')
}

# Start from a clean base/ directory
rm -rf "${FTT_BASE_OUTPUT_DIR}"
mkdir -p "${FTT_BASE_OUTPUT_DIR}"

# Iterate over the files located in fonts/
for fontfile in ${execdir}/fonts/*; do

# Generate base images for each font size specified in fontsize_array
for fontsize in "${fontsize_array[@]}"
do

# Get the font name without file extension
fontname_extn=$(basename "${fontfile}")
fontname="${fontname_extn%.*}"

mkdir -p "${FTT_BASE_OUTPUT_DIR}/${fontname}/${fontsize}/" && cd $_

# Run ftlint on the font and store the lines starting with glyph index
echo -e "${PURPLE}Running ftlint on ${CYAN}${fontname_extn}${PURPLE} with font size:${NC} ${fontsize}"
"${FTLINT}" "${fontsize}" "${fontfile}" | grep -E '[0-9]:' > "${fontname}_${fontsize}.ftlint"

  maxidx=$(getmaxidx "${fontfile}")

  for (( idx=0 ; idx<maxidx ; idx++ )) ; do

# Generate ftgrid images for each glyph in the font
"${FTGRID}" -k Pq -f "${idx}" "${fontsize}" "${fontfile}" > /dev/null 2>&1
mv "ftgrid.png" "${fontname}_${fontsize}_${idx}_base.png"
done
done
cd ..
done
